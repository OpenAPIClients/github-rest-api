openapi: 3.0.3
info:
  title: Github Open API
  description: |-
    This is based on the [GitHub REST API documentation](https://docs.github.com/en/rest?apiVersion=2022-11-28)
  version: 0.0.1
servers:
  - url: https://api.github.com
tags:
  - name: Repositories
    description: Use the REST API to manage repositories on GitHub.
paths:
  /users/{username}/repos:
    get:
      tags:
        - Repositories
      summary: List repositories for a user
      description: See [origin document](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repositories-for-a-user)
      operationId: listUserRepositories
      parameters:
        - name: username
          in: path
          description: Github username
          required: true
          schema:
            type: string
            example: yikunc
        - $ref: '#/components/parameters/apiVersion'
        - $ref: '#/components/parameters/accept'
        - name: type
          in: query
          description: Limit results to repositories of the specified type.
          schema:
            type: string
            default: owner
            enum:
              - all
              - owner
              - member
        - name: sort
          in: query
          description: The property to sort the results by.
          schema:
            type: string
            default: full_name
            enum:
              - created
              - updated
              - pushed
              - full_name
        - name: direction
          in: query
          description: The order to sort by. Default to `asc` when using full_name, otherwise `desc`.
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: per_page
          in: query
          description: The number of results per page (max 100). For more information, see [Using pagination in the REST API.](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)
          schema:
            type: integer
            default: 30
            maximum: 100
        - name: page
          in: query
          description: The page number of the results to fetch. For more information, see [Using pagination in the REST API.](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)
          schema:
            type: integer
            default: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalRepository'
components:
  schemas:
    SampleUser:
      type: object
      title: Simple User
      description: A GitHub user.
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          example: octocat
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDQ6VXNlcjE=
        avatar_url:
          type: string
          example: https://github.com/images/error/octocat_happy.gif
        gravatar_id:
          type: string
          nullable: true
          example: 41d064eb2195891e12d0413f63227ea7
        url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        followers_url:
          type: string
          format: uri
          example: https://github.com/users/octocat/followers
        following_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/following{/other_user}
        gists_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/gists{/gist_id}
        starred_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/starred{/owner}{/repo}
        subscriptions_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/subscriptions
        organizations_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/orgs
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/repos
        events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/events{/privacy}
        received_events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/received_events
        type:
          type: string
          example: User
        site_admin:
          type: boolean
        starred_at:
          type: string

    CodeOfConduct:
      title: Code Of Conduct
      description: Code Of Conduct
      properties:
        key:
          type: string
          example: contributor_covenant
        name:
          type: string
          example: Contributor Covenant
        url:
          type: string
          example: https://api.github.com/codes_of_conduct/contributor_covenant
        body:
          type: string
          example: # Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).\n
        html_url:
          type: string
          nullable: true
          format: uri

    MinimalRepository:
      title: Minimal Repository
      description: Minimal Repository
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1296269
        node_id:
          type: string
          example: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name:
          type: string
          example: Hello-World
        full_name:
          type: string
          example: octocat/Hello-World
        owner:
          $ref: '#/components/schemas/SampleUser'
        private:
          type: boolean
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        description:
          type: string
          nullable: true
          example: This your first repo!
        fork:
          type: boolean
        url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        archive_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/downloads
        events_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/events
        forks_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url:
          type: string
        issue_comment_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/languages
        merges_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/merges
        milestones_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url:
          type: string
        stargazers_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/subscription
        tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/tags
        teams_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/teams
        trees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url:
          type: string
        mirror_url: 
          type: string
          nullable: true
        hooks_url:
          type: string
          format: uri,
          example: http://api.github.com/repos/octocat/Hello-World/hooks
        svn_url: 
          type: string
        homepage: 
          type: string
          nullable: true        
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
        stargazers_count:
          type: integer
        watchers_count:
          type: integer
        size:
          description: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.,
          type: integer
        default_branch:
          type: string
        open_issues_count:
          type: integer
        is_template:
          type: boolean
        topics:
          type: array
          items:
            type: string
        has_issues:
          type: boolean
        has_projects:
          type: boolean
        has_wiki:
          type: boolean
        has_pages:
          type: boolean
        has_downloads:
          type: boolean
        has_discussions:
          type: boolean
        archived:
          type: boolean
        disabled:
          type: boolean
        visibility:
          type: string
        pushed_at:
          type: string
          nullable: true
          format: date-time
          example: 2011-01-26T19:06:43Z
        created_at:
          type: string
          nullable: true
          format: date-time,
          example: 2011-01-26T19:01:12Z
        updated_at:
          type: string
          nullable: true
          format: date-time,
          example: 2011-01-26T19:14:43Z
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            maintain:
              type: boolean
            push:
              type: boolean
            triage:
              type: boolean
            pull:
              type: boolean
        role_name:
          type: string
          example: admin
        temp_clone_token:
          type: string
        delete_branch_on_merge:
          type: boolean
        subscribers_count:
          type: integer
        network_count:
          type: integer
        code_of_conduct:
          $ref: '#/components/schemas/CodeOfConduct'
        license:
          type: object
          nullable: true
          properties:
            key:
              type: string
            name:
              type: string
            spdx_id:
              type: string
            url:
              type: string
            node_id:
              type: string
        forks:
          type: integer
          example: 0
        open_issues:
          type: integer
          example: 0
        watchers:
          type: integer
          example: 0
        allow_forking:
          type: boolean
        web_commit_signoff_required:
          type: boolean
          example: false
        security_and_analysis:
          type: object
          nullable: true
          properties:
            advanced_security:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - enabled
                    - disabled
            dependabot_security_updates:
              description: Enable or disable Dependabot security updates for the repository.
              properties:
                status:
                  type: string
                  description: The enablement status of Dependabot security updates for the repository.
                  enum:
                    - enabled
                    - disabled
            secret_scanning:
              properties:
                status:
                  type: string
                  enum:
                    - enabled
                    - disabled
            secret_scanning_push_protection:
              properties:
                status:
                  type: string
                  enum:
                    - enabled
                    - disabled

  parameters:
    accept:
      name: accept
      in: header
      schema:
        type: string
        example: application/vnd.github+json
    apiVersion:
      name: X-GitHub-Api-Version
      in: header
      example: 2022-11-28
      required: true
      description: API version
      schema:
        type: string
        example: 2022-11-28
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer

